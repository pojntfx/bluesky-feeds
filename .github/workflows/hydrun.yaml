name: hydrun CI

on:
  push:
  pull_request:
  schedule:
    - cron: "0 0 * * 0"

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v4
      - name: Setup TinyGo
        uses: acifani/setup-tinygo@v2
        with:
          tinygo-version: "0.30.0"
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-wasi
      - name: Set up Scale CLI
        run: |
          curl -fsSL https://dl.scale.sh?analytics=false | sh
          source ~/.bashrc
      - name: Set up atmosfeed-client
        run: |
          curl -L -o /tmp/atmosfeed-client "https://github.com/pojntfx/atmosfeed/releases/download/release-main/atmosfeed-client.linux-$(uname -m)"
          sudo install /tmp/atmosfeed-client /usr/local/bin
      - name: Configure Scale Cargo registry
        run: |
          tee ~/.cargo/config.toml <<EOT
          [registries]
          scale = { index = "sparse+https://cargo.scale.sh/v1/" }
          EOT
      - name: Build classifiers
        working-directory: ${{ matrix.target.src }}
        run: |
          for filepath in classifiers/*; do
            rkey="$(basename "$filepath")"

            scale --no-telemetry function build --release -d "${filepath}"
            scale --no-telemetry function export "local/${rkey}:latest" out
          done
      - name: Apply classifiers with atmosfeed-client
        working-directory: ${{ matrix.target.src }}
        env:
          ATMOSFEED_PASSWORD: ${{ secrets.ATMOSFEED_PASSWORD }}
          ATMOSFEED_USERNAME: ${{ secrets.ATMOSFEED_USERNAME }}
          ATMOSFEED_ATMOSFEED_URL: ${{ secrets.ATMOSFEED_ATMOSFEED_URL }}
          ATMOSFEED_FEED_GENERATOR_DID: ${{ secrets.ATMOSFEED_FEED_GENERATOR_DID }}
        run: |
          for filepath in out/*.scale; do
            rkey="$(basename "$filepath" -latest.scale)"
            rkey="${rkey#local-}"

            atmosfeed-client apply --feed-rkey "${rkey}" --feed-classifier "${filepath}"
          done
      - name: Upload output
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.id }}
          path: ${{ matrix.target.dst }}

  publish-linux:
    runs-on: ubuntu-latest
    needs: build-linux

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download output
        uses: actions/download-artifact@v2
        with:
          path: /tmp/out
      - name: Extract branch name
        id: extract_branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      - name: Publish pre-release to GitHub releases
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: release-${{ steps.extract_branch.outputs.branch }}
          prerelease: true
          files: |
            /tmp/out/*/*
      - name: Publish release to GitHub releases
        if: startsWith(github.ref, 'refs/tags/v')
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            /tmp/out/*/*
